
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007 IBM Corporation.
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the Eclipse Public License v1.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html
//
//Contributors:
//    Philippe Charles (pcharles@us.ibm.com) - initial API and implementation

////////////////////////////////////////////////////////////////////////////////

package org.eclipse.imp.java.formatting.parser;

public class JavaLexerprs implements lpg.runtime.ParseTable, JavaLexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 218;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 102;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 1118;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 367;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 40;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 142;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 368;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 97;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 103;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 750;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 751;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return JavaLexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,1,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            25,14,4,26,33,29,30,31,19,21,
            28,32,15,20,22,27,36,40,2,3,
            5,6,7,8,9,10,11,12,13,16,
            17,18,23,24,34,35,37,38,1,39
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,14,19,19,16,13,14,19,21,22,
            24,15,12,14,3,3,1,1,1,5,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,3,2,2,3,1,2,3,4,1,
            2,2,3,2,3,2,2,3,3,2,
            3,2,2,0,1,2,2,2,0,2,
            0,1,1,2,1,2,2,2,3,2,
            3,3,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,3,1,
            1,1,1,1,1,1,1,1,1,1,
            2,1,2,2,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,6,2,
            1,1,1,1,1,1,1,6,2,2,
            2,2,2,2,2,2,2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,23,23,23,23,
            25,25,25,25,25,25,25,24,24,24,
            24,26,26,26,26,27,27,28,28,21,
            21,3,3,2,2,31,31,32,32,32,
            14,14,14,11,11,11,11,11,6,6,
            6,6,6,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,1,1,1,1,1,
            1,1,1,1,1,12,12,12,12,12,
            12,12,12,5,5,5,5,5,5,5,
            5,5,5,5,5,4,4,35,35,35,
            9,9,10,10,13,13,16,16,30,30,
            29,29,20,20,20,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,36,36,36,36,36,36,
            36,36,36,36,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,38,38,
            38,38,38,38,38,38,38,38,15,15,
            15,15,40,40,33,33,33,33,33,33,
            33,33,34,34,34,34,34,34,34,34,
            34,22,22,22,22,22,22,22,22,22,
            18,18,18,18,18,18,18,18,408,738,
            458,1062,394,394,737,737,737,610,214,739,
            1006,538,1261,213,213,213,98,381,377,73,
            78,17,18,19,1110,94,455,470,1,83,
            466,1050,426,426,83,83,83,423,742,83,
            510,598,434,83,200,83,598,598,598,1206,
            748,588,686,308,90,436,1158,94,598,90,
            90,90,598,921,726,485,103,81,485,485,
            398,90,81,81,81,751,492,81,598,492,
            492,81,971,81,630,205,88,90,951,94,
            90,88,88,88,483,485,1285,76,80,721,
            1242,67,571,792,401,71,77,1122,582,582,
            380,211,401,1252,821,687,96,359,88,96,
            96,88,776,501,842,579,501,501,69,801,
            507,826,509,507,507,509,509,851,515,876,
            358,515,515,358,358,901,517,926,349,517,
            517,349,349,1206,748,588,696,1206,748,588,
            700,1206,748,588,703,1206,748,588,707,1206,
            748,588,708,1074,748,588,715,1206,748,588,
            727,1206,748,588,728,1206,748,588,729,1087,
            748,588,733,1206,748,588,735,1230,748,588,
            736,1026,1134,584,584,1146,586,586,1008,1276,
            75,79,1170,94,1182,94,1194,94,1218,94,
            350,199,871,942,980,638,1239,892,684,982,
            1227,713,703,963,988,990,968,685,998,1004,
            1002,1083,991,1071,1267,1143,994,1246,1272,1244,
            1243,1247,1263,1038,1286,1291,1167,1248,1266,1288,
            1290,1179,1292,1096,1099,1305,1308,1269,1312,1310,
            1313,1320,1322,1319,1321,1325,1329,1326,1328,1332,
            1333,1334,1337,1338,1345,1347,1340,1352,1349,1350,
            1355,486,1351,1353,1367,1373,1356,1362,1374,1377,
            1378,1380,1379,1383,1384,1385,1387,1391,1392,1394,
            1397,1398,1401,1402,1403,1404,1405,1406,1407,1409,
            1412,1410,1420,1422,1428,1424,1423,1426,1429,1438,
            1439,1430,1441,1444,1445,1446,1448,1451,1452,1449,
            1453,1454,1456,1462,1463,1465,1466,1467,1473,1470,
            1475,1476,1478,1481,1482,1484,1487,1488,1493,1495,
            1491,1496,1497,1498,1502,1505,1506,1504,1507,1509,
            1512,1516,1519,1520,1521,1522,1523,1527,1532,751,
            751
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,98,99,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            98,99,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,0,98,99,0,0,102,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,0,98,99,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,0,79,80,81,82,
            83,84,85,86,87,88,89,90,91,92,
            93,94,95,96,19,0,0,100,101,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,0,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,98,99,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,0,
            21,22,23,24,97,26,27,0,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,25,46,47,48,49,50,
            0,0,25,0,0,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,0,0,76,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,0,17,18,19,77,21,22,23,
            24,28,0,29,12,0,30,0,81,82,
            0,9,0,0,38,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,0,17,18,19,25,21,22,23,24,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,25,17,18,19,
            0,21,22,23,24,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,0,17,18,19,75,21,22,23,24,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,25,17,18,19,
            0,21,22,23,24,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,0,17,18,19,25,21,22,23,24,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,25,17,18,19,
            0,21,22,23,24,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,0,17,18,19,25,21,22,23,24,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,25,17,18,19,
            0,21,22,23,24,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,0,17,18,19,25,21,22,23,24,
            0,1,2,3,4,5,6,7,8,9,
            10,11,0,13,14,15,25,0,18,19,
            0,1,2,3,4,5,6,7,8,0,
            30,0,0,16,0,15,16,0,38,0,
            0,21,30,0,53,45,26,0,28,29,
            80,0,12,0,25,0,36,0,1,2,
            3,4,5,6,7,8,13,16,13,14,
            15,51,15,16,19,0,45,30,21,42,
            41,52,39,26,31,28,29,0,13,14,
            15,0,0,36,19,0,9,0,78,0,
            1,2,3,4,5,6,7,8,51,10,
            11,0,1,2,3,4,5,6,7,8,
            0,10,11,0,1,2,3,4,5,6,
            7,8,0,10,11,78,0,1,2,3,
            4,5,6,7,8,0,10,11,0,17,
            27,52,53,0,34,0,45,9,13,0,
            1,2,3,4,5,6,7,8,32,10,
            11,0,1,2,3,4,5,6,7,8,
            35,10,11,0,1,2,3,4,5,6,
            7,8,0,10,11,0,1,2,3,4,
            5,6,7,8,12,10,11,0,1,2,
            3,4,5,6,7,8,0,10,11,0,
            1,2,3,4,5,6,7,8,0,10,
            11,0,1,2,3,4,5,6,7,8,
            12,10,11,0,1,2,3,4,5,6,
            7,8,36,10,11,0,1,2,3,4,
            5,6,7,8,0,10,11,0,1,2,
            3,4,5,6,7,8,0,10,11,0,
            1,2,3,4,5,6,7,8,0,10,
            11,0,0,0,18,0,0,0,22,23,
            24,0,1,2,3,4,5,6,7,8,
            0,18,0,37,17,0,0,0,0,43,
            44,0,27,47,48,0,1,2,3,4,
            5,6,7,8,0,0,40,0,46,0,
            0,0,27,9,32,54,55,13,14,15,
            34,41,18,19,0,34,16,0,40,0,
            50,0,0,9,29,74,27,79,0,0,
            0,0,35,32,0,0,14,0,0,9,
            12,0,0,0,9,97,0,0,31,0,
            29,100,101,22,0,9,0,16,0,0,
            0,0,0,44,0,0,32,97,39,31,
            9,0,12,17,27,16,0,13,35,37,
            43,32,0,0,26,31,0,0,0,0,
            14,9,0,0,0,30,0,35,9,12,
            0,0,16,0,33,12,0,0,12,26,
            0,0,0,0,0,0,0,16,0,0,
            9,0,16,31,17,37,13,27,18,0,
            9,0,0,0,20,0,42,0,0,0,
            9,38,26,31,29,12,9,0,0,30,
            0,33,20,0,0,0,17,0,0,12,
            0,0,0,0,9,0,16,32,20,31,
            16,0,0,20,0,0,0,12,49,0,
            20,20,0,12,0,0,29,0,30,26,
            0,0,16,0,20,33,0,0,16,27,
            0,16,0,12,0,0,0,0,29,34,
            26,0,16,0,0,0,0,20,0,32,
            27,0,20,33,20,0,26,20,0,0,
            0,0,0,27,20,20,0,26,33,0,
            0,0,0,0,0,0,0,0,0,28,
            0,0,0,28,0,0,28,28,28,28,
            28,20,0,0,28,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            97,0,0,97,0,97,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            751,834,834,834,834,834,834,834,834,834,
            834,834,834,834,834,834,834,834,834,834,
            834,834,834,834,834,834,834,834,834,834,
            834,834,834,834,834,834,834,834,834,834,
            834,834,834,834,834,834,834,834,834,834,
            834,834,834,834,834,834,834,834,834,834,
            834,834,834,834,834,834,834,834,834,834,
            834,834,834,834,834,834,834,834,834,834,
            834,833,436,834,834,834,834,834,834,834,
            834,834,834,834,834,834,834,89,834,834,
            834,834,751,832,832,832,832,832,832,832,
            832,832,832,832,832,832,832,832,832,832,
            832,832,832,832,832,832,832,832,832,832,
            832,832,832,832,832,832,832,832,832,832,
            832,832,832,832,832,832,832,832,832,832,
            832,832,832,832,832,832,832,832,832,832,
            832,832,832,832,832,832,832,832,832,832,
            832,832,832,832,832,832,832,832,832,832,
            832,832,832,771,837,832,832,832,832,832,
            832,832,832,832,832,832,832,832,832,84,
            832,832,832,832,21,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,839,839,839,839,839,839,839,839,839,
            839,751,839,839,751,751,839,751,841,841,
            841,841,841,841,841,841,841,841,841,841,
            841,841,841,841,841,841,841,841,841,841,
            841,841,841,841,841,841,841,841,841,841,
            841,841,841,841,841,841,841,841,841,841,
            841,841,841,841,841,841,841,841,766,841,
            841,841,841,841,841,841,841,841,841,841,
            841,841,841,841,841,841,841,841,841,841,
            841,841,841,841,841,578,841,841,841,841,
            841,841,841,841,841,841,841,841,841,841,
            841,841,841,841,751,841,841,751,382,738,
            738,738,738,738,738,738,737,738,738,737,
            737,737,737,737,737,737,737,796,737,737,
            737,737,494,737,737,410,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,737,371,737,737,737,737,737,386,594,
            593,739,739,737,737,737,737,737,737,737,
            737,737,737,737,737,737,737,737,737,737,
            737,739,469,596,454,751,795,433,595,592,
            473,408,798,786,484,782,783,793,794,797,
            781,790,778,779,672,751,751,739,739,751,
            598,598,598,598,598,598,598,598,598,598,
            598,598,598,598,598,598,598,598,598,598,
            598,598,598,598,598,598,598,751,598,598,
            598,598,598,598,598,598,598,598,598,598,
            598,598,598,598,598,598,598,598,598,598,
            598,598,598,598,598,598,598,598,598,598,
            598,598,598,598,598,598,598,598,598,598,
            598,598,598,598,598,598,598,452,598,598,
            598,598,598,598,598,598,598,598,598,598,
            598,598,598,598,598,598,751,598,598,1,
            965,965,965,965,965,965,965,965,964,965,
            965,964,964,964,964,964,964,964,964,37,
            964,964,964,964,750,964,964,26,964,964,
            964,964,964,964,964,964,964,964,964,964,
            964,964,964,964,809,964,964,964,964,964,
            751,751,808,751,751,964,964,964,964,964,
            964,964,964,964,964,964,964,964,964,964,
            964,964,964,751,751,964,68,847,847,847,
            847,847,847,847,847,847,847,847,847,847,
            847,847,751,847,847,847,815,847,847,847,
            847,767,751,616,611,751,820,751,838,414,
            36,610,751,751,820,751,485,485,485,485,
            485,485,485,485,485,485,485,485,485,485,
            485,41,485,485,485,810,485,485,485,485,
            751,492,492,492,492,492,492,492,492,492,
            492,492,492,492,492,492,803,492,492,492,
            751,492,492,492,492,751,501,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,34,501,501,501,814,501,501,501,501,
            751,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,812,507,507,507,
            33,507,507,507,507,751,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,29,509,509,509,811,509,509,509,509,
            751,515,515,515,515,515,515,515,515,515,
            515,515,515,515,515,515,801,515,515,515,
            25,515,515,515,515,751,1109,1109,1109,1109,
            1109,1109,1109,1109,1109,1109,1109,1109,1109,1109,
            1109,53,1109,1109,1109,807,1109,1109,1109,1109,
            751,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,813,517,517,517,
            38,517,517,517,517,751,1100,1100,1100,1100,
            1100,1100,1100,1100,1100,1100,1100,1100,1100,1100,
            1100,24,1100,1100,1100,802,1100,1100,1100,1100,
            17,845,845,845,845,845,845,845,845,401,
            845,845,751,827,827,831,806,751,401,831,
            751,740,741,742,743,744,745,746,747,23,
            818,751,751,615,751,1114,1112,751,818,751,
            751,1111,612,751,800,477,1113,751,1117,1115,
            597,751,622,751,805,72,445,751,1101,1101,
            1101,1101,1101,1101,1101,1101,619,620,824,824,
            829,1116,1114,1112,829,74,816,617,1111,613,
            614,799,626,1113,618,1117,1115,751,826,826,
            830,751,751,499,830,751,633,751,1118,751,
            426,426,426,426,426,426,426,426,1116,426,
            426,40,394,394,394,394,394,394,394,394,
            751,394,394,91,748,748,748,748,748,748,
            748,748,751,748,748,1118,91,748,748,748,
            748,748,748,748,748,751,748,748,751,621,
            716,575,572,751,623,751,599,645,644,97,
            845,845,845,845,845,845,845,845,563,845,
            845,98,582,582,582,582,582,582,582,582,
            643,582,582,751,584,584,584,584,584,584,
            584,584,751,584,584,751,586,586,586,586,
            586,586,586,586,625,586,586,100,845,845,
            845,845,845,845,845,845,751,845,845,99,
            845,845,845,845,845,845,845,845,751,845,
            845,102,845,845,845,845,845,845,845,845,
            641,845,845,101,845,845,845,845,845,845,
            845,845,636,845,845,91,748,748,748,748,
            748,748,748,748,751,748,748,92,845,845,
            845,845,845,845,845,845,751,845,845,91,
            748,748,748,748,748,748,748,748,212,748,
            748,22,751,751,605,751,751,751,608,607,
            603,197,579,579,579,579,579,579,579,579,
            93,629,751,609,637,751,751,751,751,606,
            604,751,627,601,602,198,950,950,950,950,
            950,950,950,950,19,751,631,751,630,751,
            751,751,638,401,632,962,962,822,822,828,
            624,434,401,828,751,628,635,751,648,751,
            434,751,751,646,634,962,640,600,751,751,
            751,751,639,642,751,751,651,751,751,655,
            654,751,751,751,658,1,751,751,647,751,
            649,962,962,653,751,663,751,660,751,751,
            751,751,751,650,751,751,656,17,652,657,
            668,751,673,666,664,670,751,671,662,661,
            659,667,751,751,669,665,751,751,751,751,
            675,419,751,751,751,676,751,674,681,680,
            751,751,679,751,677,684,751,751,687,678,
            751,751,751,751,751,751,751,523,751,751,
            527,751,690,683,691,682,694,688,692,751,
            698,751,751,751,764,751,685,751,751,751,
            539,689,531,693,695,702,701,751,751,699,
            751,697,757,751,751,751,709,751,751,706,
            751,751,751,751,711,751,710,704,765,705,
            543,751,751,758,751,751,751,718,535,751,
            753,763,751,719,751,751,712,751,713,717,
            751,751,722,751,756,714,751,751,723,720,
            751,551,751,726,751,751,751,751,724,721,
            547,751,731,212,751,751,93,759,210,555,
            730,175,755,725,754,176,559,760,177,178,
            179,180,181,734,761,762,182,567,732,751,
            751,93,751,751,751,751,751,751,751,197,
            751,751,751,197,751,751,197,197,197,197,
            197,92,751,751,197,751,751,751,751,751,
            751,751,751,751,751,751,751,751,751,751,
            751,751,751,751,751,751,751,751,751,751,
            751,751,751,751,751,751,751,751,751,751,
            751,751,751,751,751,751,751,751,751,751,
            1,751,751,17,751,22
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
